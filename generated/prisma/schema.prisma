generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                  @id @default(autoincrement())
  email                  String               @unique
  password               String
  firstName              String?              @map("first_name")
  lastName               String?              @map("last_name")
  isUnsubscribed         Boolean              @default(false) @map("is_unsubscribed")
  sessionId              String?              @map("session_id")
  isPaid                 Boolean              @default(false) @map("is_paid")
  isTemporary            Boolean              @default(false) @map("is_temporary")
  hasUnlockedFirstReport Boolean              @default(false) @map("has_unlocked_first_report")
  tempQuizData           Json?                @map("temp_quiz_data")
  expiresAt              DateTime?            @map("expires_at")
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @default(now()) @map("updated_at")
  passwordResetTokens    PasswordResetToken[]
  payments               Payment[]
  quizAttempts           QuizAttempt[]
  refundsProcessed       Refund[]             @relation("RefundAdminUser")
  reportViews            ReportView[]

  @@map("users")
}

model QuizAttempt {
  id          Int          @id @default(autoincrement())
  userId      Int?
  sessionId   String?
  quizData    Json
  aiContent   Json?
  isPaid      Boolean      @default(false)
  completedAt DateTime     @default(now())
  aiContents  AiContent[]
  payments    Payment[]
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportViews ReportView[]
}

model AiContent {
  id            Int         @id @default(autoincrement())
  quizAttemptId Int
  contentType   String
  content       Json
  contentHash   String?
  generatedAt   DateTime    @default(now())
  createdAt     DateTime    @default(now())
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)

  @@unique([quizAttemptId, contentType])
}

model Payment {
  id                    Int          @id @default(autoincrement())
  userId                Int
  amount                Decimal      @db.Decimal(10, 2)
  currency              String       @default("usd")
  type                  String
  stripePaymentIntentId String?      @unique
  paypalOrderId         String?      @unique
  status                String       @default("pending")
  quizAttemptId         Int?
  createdAt             DateTime     @default(now())
  completedAt           DateTime?
  version               Int          @default(1)
  quizAttempt           QuizAttempt? @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  refunds               Refund[]

  @@index([status], map: "idx_payment_status")
  @@index([userId], map: "idx_payment_user")
  @@index([stripePaymentIntentId], map: "idx_payment_stripe")
  @@index([paypalOrderId], map: "idx_payment_paypal")
}

model Refund {
  id             Int       @id @default(autoincrement())
  paymentId      Int
  amount         Decimal   @db.Decimal(10, 2)
  currency       String    @default("usd")
  reason         String
  status         String    @default("pending")
  stripeRefundId String?
  paypalRefundId String?
  adminUserId    Int?
  adminNote      String?
  createdAt      DateTime  @default(now())
  processedAt    DateTime?
  adminUser      User?     @relation("RefundAdminUser", fields: [adminUserId], references: [id])
  payment        Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model UnpaidUserEmail {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique
  email     String
  quizData  Json
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model ReportView {
  id            Int         @id @default(autoincrement())
  userId        Int?
  sessionId     String?
  quizAttemptId Int
  viewedAt      DateTime    @default(now())
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
